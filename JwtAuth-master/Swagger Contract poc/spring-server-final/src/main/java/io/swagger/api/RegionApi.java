/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CountResponse;
import io.swagger.model.ErrorResponse;
import io.swagger.model.Region;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-01T10:15:14.735Z[GMT]")
@Api(value = "region", description = "the region API")
public interface RegionApi {

    @ApiOperation(value = "returns a region", nickname = "addRegion", notes = "add details about a region", response = Region.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Region.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/region",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Region> addRegion(@NotNull @Min(0)@ApiParam(value = "idCompany of the company to fetch.", required = true, allowableValues = "") @Valid @RequestParam(value = "idCompany", required = true) Integer idCompany,@ApiParam(value = ""  )  @Valid @RequestBody Region body);


    @ApiOperation(value = "returns a region", nickname = "deleteRegion", notes = "delete details about a region", response = Region.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepted", response = Region.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/region/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Region> deleteRegion(@Min(0)@ApiParam(value = "id of the region to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a region", nickname = "getAllRegion", notes = "get details about all region", response = Region.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Region.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/region",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Region>> getAllRegion(@NotNull @Min(0)@ApiParam(value = "idCompany of the company to fetch.", required = true, allowableValues = "") @Valid @RequestParam(value = "idCompany", required = true) Integer idCompany,@ApiParam(value = "if provided, returns the regions that match this name.") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "if true, populates all nested entities.") @Valid @RequestParam(value = "populate", required = false) Boolean populate);


    @ApiOperation(value = "returns a region", nickname = "getRegion", notes = "get details about a region", response = Region.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Region.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/region/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Region> getRegion(@Min(0)@ApiParam(value = "id of the region to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id,@ApiParam(value = "if true, populates all nested entities.") @Valid @RequestParam(value = "populate", required = false) Boolean populate);


    @ApiOperation(value = "returns number of regions in a company.", nickname = "getRegionsCount", notes = "get number of regions in a company.", response = CountResponse.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Count for the requested entity.", response = CountResponse.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/region/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResponse> getRegionsCount(@NotNull @Min(0)@ApiParam(value = "Company Id of the company to count regions for.", required = true, allowableValues = "") @Valid @RequestParam(value = "idCompany", required = true) Integer idCompany);


    @ApiOperation(value = "returns a region", nickname = "updateRegion", notes = "update details about a region", response = Region.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepted", response = Region.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/region",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Region> updateRegion(@ApiParam(value = ""  )  @Valid @RequestBody Region body);

}
