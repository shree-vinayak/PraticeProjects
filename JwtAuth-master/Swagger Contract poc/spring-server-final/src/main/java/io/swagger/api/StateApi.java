/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorResponse;
import io.swagger.model.State;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-01T10:15:14.735Z[GMT]")
@Api(value = "state", description = "the state API")
public interface StateApi {

    @ApiOperation(value = "returns all states.", nickname = "getAllStates", notes = "get list of all states", response = State.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "general", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = State.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/state",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<State>> getAllStates(@NotNull @Min(0)@ApiParam(value = "idCountry of the country to fetch states for.", required = true, allowableValues = "") @Valid @RequestParam(value = "idCountry", required = true) Integer idCountry,@ApiParam(value = "if provided, returns the states that match this name.") @Valid @RequestParam(value = "name", required = false) String name);


    @ApiOperation(value = "returns a state", nickname = "getState_", notes = "get details about a state", response = State.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "general", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = State.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/state/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<State> getState_(@Min(0)@ApiParam(value = "id of the state to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);

}
