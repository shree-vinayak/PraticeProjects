/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-05-27T12:30:09.855Z[GMT]")
@Api(value = "test", description = "the test API")
public interface TestApi {

    @ApiOperation(value = "Creates a user.", nickname = "testAddUserPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created") })
    @RequestMapping(value = "/test/addUser",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> testAddUserPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body);


    @ApiOperation(value = "Returns a user by ID.", nickname = "testGetUserUserIdGet", notes = "", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A user object.", response = User.class),
        @ApiResponse(code = 400, message = "The specified user ID is invalid (not a number)."),
        @ApiResponse(code = 404, message = "A user with the specified ID was not found."),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/test/getUser/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> testGetUserUserIdGet(@Min(1L)@ApiParam(value = "The ID of the user to return.",required=true, allowableValues = "") @PathVariable("userId") Long userId);


    @ApiOperation(value = "Returns a user by ID.", nickname = "testUserUserIdGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/test/user/{userId}",
        method = RequestMethod.GET)
    ResponseEntity<Void> testUserUserIdGet(@Min(1L)@ApiParam(value = "Parameter description in CommonMark or HTML.",required=true, allowableValues = "") @PathVariable("userId") Long userId);


    @ApiOperation(value = "Returns a list of users.", nickname = "testUsersGet", notes = "Optional extended description in CommonMark or HTML.", response = String.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON array of user names", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/test/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> testUsersGet();

}
