package com.astute.api.impl;

import com.astute.api.*;
import com.astute.api.model.*;

import com.astute.api.model.Circle;
import com.astute.api.model.Company;
import com.astute.api.model.Division;
import com.astute.api.model.ErrorResponse;
import com.astute.api.model.Region;
import com.astute.api.model.SubDivision;
import com.astute.api.model.Zone;

import java.util.List;
import com.astute.api.NotFoundException;

import java.io.InputStream;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.validation.constraints.*;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-05-25T15:33:05.989+05:30[Asia/Calcutta]")
public class CompanyApiServiceImpl extends CompanyApiService {
    @Override
    public Response addCompany(Company company, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response deleteCircle( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response deleteCompany( @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response deleteDivision( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer idCircle,  @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response deleteRegion( @Min(0)Integer idCompany,  @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response deleteSubDivision( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer idCircle,  @Min(0)Integer idDivision,  @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response deleteZone( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer idCircle,  @Min(0)Integer idDivision,  @Min(0)Integer idSubdivision,  @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getAllCircle( @Min(0)Integer idCompany,  @Min(0)Integer idRegion, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getAllCompany(SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getAllDivision( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer idCircle, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getAllRegion( @Min(0)Integer idCompany, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getAllSubDivision( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer idCircle,  @Min(0)Integer idDivision, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getAllZone( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer idCircle,  @Min(0)Integer idDivision,  @Min(0)Integer idSubdivision, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getCircle( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getCompany( @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getDivision( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer idCircle,  @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getRegion( @Min(0)Integer idCompany,  @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getSubDivision( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer idCircle,  @Min(0)Integer idDivision,  @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response getZone( @Min(0)Integer idCompany,  @Min(0)Integer idRegion,  @Min(0)Integer idCircle,  @Min(0)Integer idDivision,  @Min(0)Integer idSubdivision,  @Min(0)Integer id, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
    @Override
    public Response updateCompany(Company company, SecurityContext securityContext) throws NotFoundException {
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
    }
}
