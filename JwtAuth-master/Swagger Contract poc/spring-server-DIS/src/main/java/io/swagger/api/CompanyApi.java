/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Circle;
import io.swagger.model.Company;
import io.swagger.model.Division;
import io.swagger.model.ErrorResponse;
import io.swagger.model.Region;
import io.swagger.model.SubDivision;
import io.swagger.model.Zone;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-05-27T11:55:04.724Z[GMT]")
@Api(value = "company", description = "the company API")
public interface CompanyApi {

    @ApiOperation(value = "returns a company", nickname = "addCompany", notes = "add details about a company", response = Company.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Company.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Company> addCompany();


    @ApiOperation(value = "returns a circle", nickname = "deleteCircle", notes = "delete details about a circle", response = Circle.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepted", response = Circle.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Circle> deleteCircle(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "id of the circle to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a company", nickname = "deleteCompany", notes = "delete details about a company", response = Company.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepted", response = Company.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Company> deleteCompany(@Min(0)@ApiParam(value = "id of the company to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a division", nickname = "deleteDivision", notes = "delete details about a division", response = Division.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepted", response = Division.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{idCircle}/division/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Division> deleteDivision(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "idCircle of the circle to fetch.",required=true, allowableValues = "") @PathVariable("idCircle") Integer idCircle,@Min(0)@ApiParam(value = "id of the division to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a region", nickname = "deleteRegion", notes = "delete details about a region", response = Region.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepted", response = Region.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Region> deleteRegion(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "id of the region to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a subDivision", nickname = "deleteSubDivision", notes = "delete details about a subDivision", response = SubDivision.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SubDivision.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{idCircle}/division/{idDivision}/subDivision/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<SubDivision> deleteSubDivision(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "idCircle of the circle to fetch.",required=true, allowableValues = "") @PathVariable("idCircle") Integer idCircle,@Min(0)@ApiParam(value = "idDivision of the division to fetch.",required=true, allowableValues = "") @PathVariable("idDivision") Integer idDivision,@Min(0)@ApiParam(value = "id of the subDivision to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a zone", nickname = "deleteZone", notes = "delete details about a zone", response = Zone.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepted", response = Zone.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{idCircle}/division/{idDivision}/subdivision/{idSubdivision}/zone/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Zone> deleteZone(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "idCircle of the circle to fetch.",required=true, allowableValues = "") @PathVariable("idCircle") Integer idCircle,@Min(0)@ApiParam(value = "idDivision of the division to fetch.",required=true, allowableValues = "") @PathVariable("idDivision") Integer idDivision,@Min(0)@ApiParam(value = "idSubdivision of the subdivision to fetch.",required=true, allowableValues = "") @PathVariable("idSubdivision") Integer idSubdivision,@Min(0)@ApiParam(value = "id of the zone to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a circle", nickname = "getAllCircle", notes = "get details about all circle", response = Circle.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Circle.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Circle> getAllCircle(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion);


    @ApiOperation(value = "returns a company", nickname = "getAllCompany", notes = "get details about all company", response = Company.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Company.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Company> getAllCompany();


    @ApiOperation(value = "returns a division", nickname = "getAllDivision", notes = "get details about all division", response = Division.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Division.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{idCircle}/division",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Division> getAllDivision(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "idCircle of the circle to fetch.",required=true, allowableValues = "") @PathVariable("idCircle") Integer idCircle);


    @ApiOperation(value = "returns a region", nickname = "getAllRegion", notes = "get details about all region", response = Region.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Region.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Region> getAllRegion(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany);


    @ApiOperation(value = "returns a subDivision", nickname = "getAllSubDivision", notes = "get details about all subDivision", response = SubDivision.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SubDivision.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{idCircle}/division/{idDivision}/subdivision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SubDivision> getAllSubDivision(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "idCircle of the circle to fetch.",required=true, allowableValues = "") @PathVariable("idCircle") Integer idCircle,@Min(0)@ApiParam(value = "idDivision of the division to fetch.",required=true, allowableValues = "") @PathVariable("idDivision") Integer idDivision);


    @ApiOperation(value = "returns a zone", nickname = "getAllZone", notes = "get details about all zone", response = Zone.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Zone.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{idCircle}/division/{idDivision}/subdivision/{idSubdivision}/zone",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Zone> getAllZone(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "idCircle of the circle to fetch.",required=true, allowableValues = "") @PathVariable("idCircle") Integer idCircle,@Min(0)@ApiParam(value = "idDivision of the division to fetch.",required=true, allowableValues = "") @PathVariable("idDivision") Integer idDivision,@Min(0)@ApiParam(value = "idSubdivision of the subdivision to fetch.",required=true, allowableValues = "") @PathVariable("idSubdivision") Integer idSubdivision);


    @ApiOperation(value = "returns a circle", nickname = "getCircle", notes = "get details about a circle", response = Circle.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Circle.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Circle> getCircle(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "id of the circle to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a company", nickname = "getCompany", notes = "get details about a company", response = Company.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Company.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Company> getCompany(@Min(0)@ApiParam(value = "id of the company to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a division", nickname = "getDivision", notes = "get details about a division", response = Division.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Division.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{idCircle}/division/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Division> getDivision(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "idCircle of the circle to fetch.",required=true, allowableValues = "") @PathVariable("idCircle") Integer idCircle,@Min(0)@ApiParam(value = "id of the division to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a region", nickname = "getRegion", notes = "get details about a region", response = Region.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Region.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Region> getRegion(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "id of the region to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a subSubDivision", nickname = "getSubDivision", notes = "get details about a subSubDivision", response = SubDivision.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SubDivision.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{idCircle}/division/{idDivision}/subDivision/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SubDivision> getSubDivision(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "idCircle of the circle to fetch.",required=true, allowableValues = "") @PathVariable("idCircle") Integer idCircle,@Min(0)@ApiParam(value = "idDivision of the division to fetch.",required=true, allowableValues = "") @PathVariable("idDivision") Integer idDivision,@Min(0)@ApiParam(value = "id of the subSubDivision to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a zone", nickname = "getZone", notes = "get details about a zone", response = Zone.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Zone.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company/{idCompany}/region/{idRegion}/circle/{idCircle}/division/{idDivision}/subdivision/{idSubdivision}/zone/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Zone> getZone(@Min(0)@ApiParam(value = "idCompany of the company to fetch.",required=true, allowableValues = "") @PathVariable("idCompany") Integer idCompany,@Min(0)@ApiParam(value = "idRegion of the region to fetch.",required=true, allowableValues = "") @PathVariable("idRegion") Integer idRegion,@Min(0)@ApiParam(value = "idCircle of the circle to fetch.",required=true, allowableValues = "") @PathVariable("idCircle") Integer idCircle,@Min(0)@ApiParam(value = "idDivision of the division to fetch.",required=true, allowableValues = "") @PathVariable("idDivision") Integer idDivision,@Min(0)@ApiParam(value = "idSubdivision of the subdivision to fetch.",required=true, allowableValues = "") @PathVariable("idSubdivision") Integer idSubdivision,@Min(0)@ApiParam(value = "id of the zone to fetch.",required=true, allowableValues = "") @PathVariable("id") Integer id);


    @ApiOperation(value = "returns a company", nickname = "updateCompany", notes = "update details about a company", response = Company.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "discom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepted", response = Company.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = ErrorResponse.class) })
    @RequestMapping(value = "/company",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Company> updateCompany();

}
